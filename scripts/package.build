# vim: tabstop=4 fileformat=unix fileencoding=utf-8 filetype=sh

# license: Apache v2.0


__license_dir="share/doc"

# ライセンスなどの情報は share/doc/<MOD>/ に入れる。
# module_name=$1 ライブラリー名。
# INSTALL_TARGET: インストール先。 package コマンドが定義している。
install_license_files() {
local module_name=$1
local docdir="${INSTALL_TARGET}/${__license_dir}/${module_name}"
	shift
	mkdir -p "${docdir}" &&
	cp "$@" "${docdir}/."
}

__script_work() {
	for work in $@
	do
		pre=${working}

		__prerunpost ${work}
		if [ ! 0 -eq $? ]
		then
			__fail_exit "ビルド プロセスでエラーが発生しました。"
		fi
	done
}


# --range のための変数。
working=

# 本処理。処理内容をログに記録するためコマンドをエコーしている。
set -x

{
# ビルド環境の情報をログに残す。
lsb_release -a
# apt-cache show mingw-w64
gcc -v

# アーカイブを展開する。
# すでにディレクトリーが存在している場合は警告する。
if [ -d "${DIRECTORY}" ]
then
	echo "WARNING: 古い、展開されたディレクトリー '${DIRECTORY}' が存在します。ビルドに不具合が紛れ込む可能性があります。ビルドを中止し、ディレクトリーを削除してから、再度ビルドを試みることをおすすめします。"
fi
__script_work expand_archive
if [ ! 0 -eq $? ]
then
	__fail_exit "ソース アーカイブを発見できませんでした。"
fi
cd "${DIRECTORY}"
if [ ! 0 -eq $? ]
then
	__fail_exit "ソース ディレクトリーに移動できません。ソース アーカイブの解凍に失敗した、もしくはビルド スクリプトの設定が間違っています。"
fi

# ビルドスクリプトの処理を呼び出す。
__script_work patch configure

# configure が生成した libtool の不具合を検出する。
"${PREFIX}/scripts/qualitycheck.libtool" check

# ビルドスクリプトの処理を呼び出す。
__script_work make make_test make_example

# pkgconfig ファイルを調べる。
__work_range "qualitycheck"
if [ "yes" = "${working}" ]
then
	"${PREFIX}/scripts/qualitycheck.pkgconfig" fix "${INSTALL_TARGET}"
	if [ ! 0 -eq $? ]
	then
		__fail_exit "pkgconfig ファイルの修正処理においてエラーが発生しました。"
	fi
fi

# ビルドスクリプトの処理を呼び出す。
__script_work pack

# 補足していないファイルを調査する。
"${PREFIX}/scripts/qualitycheck.packagefiles" check "${INSTALL_TARGET}"
if [ ! 0 -eq $? ]
then
	__fail_exit "補足していないファイルの調査においてエラーが発生しました。"
#	else
#		"${PREFIX}/scripts/qualitycheck.packagefiles" clean
fi

if [ "" = "${working}" ]
then
	__fail_exit "ビルド プロセスを実行せず終了しました。"
else
	echo "SUCCESS COMPLETED."
fi

# ログの出力場所は再考した方が良さそう。 fixme
} 2>&1 | tee "${LOG_PATH}"

echo "done."


