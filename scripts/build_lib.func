
# vim: tabstop=4 fileformat=unix fileencoding=utf-8 filetype=sh

# license: Apache v2.0

export XLIBRARY_SOURCES=${XLOCAL}/src
export XLIBRARY_ARCHIVES=${XLOCAL}/archives
export XLIBRARY_TEMP=${XLOCAL}/src/build

find_archive() {
local directory=$1
local base
local tail
local name
	shift
	for base in "$1" `echo "$1" | sed -e's/-/_/' -e's/\$/.orig/'`
	do
		for tail in tar.gz tgz tar.bz2 tar.lz tar.xz tar.lzma tar.zst zip 7z
		do 
			name="${base}.${tail}"
			if [ -f "${directory}/${name}" ]
			then
				echo "${name}"
				return 0
			fi
		done
	done
	return 1
}

expand_archive() {
local SEVENZIPCMD="7z"
local TARCMD="tar"
local UNZIPCMD="unzip"
	local NAME=$1
	case "${NAME}" in
	*.7z)
		${SEVENZIPCMD} -y x "${NAME}"
		;;
	*.tar.lz)
		${TARCMD} --lzip -xf "${NAME}"
		;;
	*.tar.xz)
		${TARCMD} -Jxf "${NAME}"
		;;
	*.tar.lzma)
		${TARCMD} --lzma -xf "${NAME}"
		;;
	*.tar.zst)
		${TARCMD} --zstd -xf "${NAME}"
		;;
	*.tar.bz2)
		${TARCMD} -jxf "${NAME}"
		;;
	*.tar.gz|*.tgz)
		${TARCMD} -zxf "${NAME}"
		;;
	*.zip)
		${UNZIPCMD} "${NAME}"
		;;
	*) 
		echo "error: unsupported archive '${NAME}'"
		return 1
		;;
	esac
	return $?
}

__MANIFEST_DIR="manifest"

manifest_dir() {
	echo "${__MANIFEST_DIR}"
}

make_manifest_dir() {
local DIR="`manifest_dir`"
	mkdir -p "${DIR}"
}

__MANIFEST_FILE_EXT=".mft"

manifest_files() {
local DIR="`manifest_dir`"
	find "${DIR}" -maxdepth 1 -name \*${__MANIFEST_FILE_EXT} -a -xtype f
}

pack_archive() {
local NAME=$1
local DIR="`manifest_dir`"
local MFT="${DIR}/${NAME}${__MANIFEST_FILE_EXT}"
local SEVENZIPCMD="7z"
local TARCMD="tar"
local XZCMD="xz"
local ARCSUFFIX_7ZIP=".7z"
local ARCSUFFIX_TARXZ=".xz"
	make_manifest_dir &&
	shift &&
	rm -f "${MFT}" &&
	(for f in "$@"; do
		find ${f} >> "${MFT}"
	done)
	if [ ! \( -s "${MFT}" \) ]; then return 1; fi
	echo "${MFT}" >> "${MFT}" &&
	case "${NAME}" in
	*.tar)
		${TARCMD} -c "$@" "${MFT}" | ${XZCMD} -z -9 > "${NAME}${ARCSUFFIX_TARXZ}"
		;;
	*.test)
		# 拡張子が test の場合はアーカイブを作らない。テスト用。
		# 望ましくないが、mft の作成と圧縮を一体化したいという意図がある。
		# ignore
		;;
	*)
		${SEVENZIPCMD} a "${NAME}${ARCSUFFIX_7ZIP}" -mmt -mx9 -l "$@" "${MFT}"
		;;
	esac
	return $?
}

store_packed_archive() {
local NAME=$1
local ARCSUFFIX_7ZIP=".7z"
local ARCSUFFIX_TARXZ=".xz"
	case "${NAME}" in
	*.tar)
		mv "${NAME}${ARCSUFFIX_TARXZ}" "${XLIBRARY_ARCHIVES}/."
		;;
	*)
		mv "${NAME}${ARCSUFFIX_7ZIP}" "${XLIBRARY_ARCHIVES}/."
		;;
	esac
	return $?
}

__EXCLUDE_FILE="exclude.files"

exclude_file() {
local DIR="`manifest_dir`"
	echo "${DIR}/${__EXCLUDE_FILE}"
}

# param: exclude file(s)
# note: *.la ファイルは自動で対象に組み込まれる。
put_exclude_files() {
local XCL="`exclude_file`"
	make_manifest_dir &&
	rm -f "${XCL}" &&
	find * -name \*.la -xtype f > "${XCL}" &&
	(for f in "$@"; do
		find ${f} >> "${XCL}"
	done)
}

patch_debian() {
local patch_archive=$1
local patches_dir="debian/patches"
	expand_archive "${patch_archive}" &&
	for fl in `cat ${patches_dir}/series`
	do
		case "${fl}" in
		"#"*)
			: echo "comment."
			;;
		*)
			patch --batch --quiet --ignore-whitespace --forward -p 1 -i ${patches_dir}/${fl}
			;;
		esac
	done
}

patch_adhoc() {
	patch --batch --ignore-whitespace --forward "$@"
}

# 0: $1 <= $2
compare_vernum_le() {
local x=$1
local y=$2
local result
	result="$(printf '%s\n' "${x}" "${y}"|sort -V|head -n1)"
	if [[ "${result}" == "${x}" ]]
	then
		return 0
	else
		return 1
	fi
}



